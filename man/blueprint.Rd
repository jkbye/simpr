% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/blueprint.R
\name{blueprint}
\alias{blueprint}
\title{Specify functions to generate variables}
\usage{
blueprint(..., sep = "_")
}
\arguments{
\item{...}{\code{purrr}-style formula functions used for generating
simulation variables.}

\item{sep}{Specify the separator for auto-generating names.  See
\emph{Details}.}
}
\value{
A \code{simpr_spec} object which contains the functions needed to
  generate the simulation; to be passed to \code{\link{meta}} for defining
  metaparameters or, if there are no metaparameters, directly to
  \code{\link{produce}} for generating the simulation.

  Also useful is the fact that one can refer to variables in subsequent
  arguments.  So, one could define another variable \code{y} that depends on
  \code{x} very simply, e.g. \code{blueprint(x = ~ 3 + runif(10), y = ~ 2 *
  x)}.

  Finally, one can also refer to metaparameters that are to be systematically
  varied in the simulation study.  See \code{\link{meta}} and the examples
  for more details.
}
\description{
Specify functions for computing each variable in the simulation.
}
\details{
This is always the first command in the simulation process, to specify the
actual simulated variables.

The \code{\dots} arguments use an efficient syntax to specify custom
functions needed for generating a simulation, based on the \code{purrr}
package.  When producing one variable, one can provide an expression such as
\code{blueprint(x = ~ 3 + runif(10))} instead of defining a custom function.

If a formula is given as a named argument, the name is used for the name(s)
of the generated variables. For instance, if the argument \code{x} generates
a two-column matrix and \code{sep = "_"} (the default) the variables will be
named \code{x_1} and \code{x_2}. Double-sided formulas specify names for
multiple columns produced by the function, and can be specified using
\code{\link{cbind}(name1, name2, etc)}, similar to multivariate
specifications elsewhere in R, e.g. \code{cbind(x, y) ~ MASS::mvrnorm(5, c(0,
0), Sigma = diag(2))}.
}
\examples{
## specify a variable and generate it in the simulation
single_var = blueprint(x = ~ 1 + rnorm(5)) \%>\%
  produce(1) # generate a single repetition of the simulation
single_var$sim_cell[[1]] # peek at the simulation

two_var = blueprint(x = ~ 1 + rnorm(5),
                    y = ~ x + 2) \%>\%
  produce(1)
two_var$sim_cell[[1]]

## Generates x_01 through x_10
autonumber_var = blueprint(x = ~ MASS::mvrnorm(5, rep(0, 10), Sigma = diag(10))) \%>\%
  produce(1)
autonumber_var$sim_cell[[1]]

# alternatively, you could use a two-sided formula for names
multi_name = blueprint(cbind(x, y, z) ~ MASS::mvrnorm(5, rep(0, 3), Sigma = diag(3))) \%>\%
  produce(1)
multi_name$sim_cell[[1]]

# Simple example of setting a metaparameter
simple_meta = blueprint(x = ~ 1 + rnorm(n)) \%>\%
  meta(n = c(5, 10)) \%>\% # without this line you would get an error!
  produce(1)


simple_meta # has two rows now, one for each value of n
simple_meta$sim_cell[[1]]
simple_meta$sim_cell[[2]]

}
